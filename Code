# Import required libraries
import rasterio
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

# Function to calculate volume for a given elevation
def calculate_volume(elevation_step, elevation_dem, raster_data):
    temp_dem = elevation_step - elevation_dem[elevation_dem < elevation_step]
    temp_volume = temp_dem.sum() * raster_data.res[0] * raster_data.res[1]
    return temp_volume

# Function to replace values with np.nan
def replace_nan_values(data_array):
    no_data_value = np.copy(data_array[0, 0])
    data_array[data_array == no_data_value] = np.nan
    return data_array

# Function to plot elevation values
def plot_elevation(data_array):
    plt.figure(figsize=(12, 12))
    plt.imshow(data_array)
    plt.title('Lake Bottom Elevation')
    plt.colorbar(label='Elevation (masl)')
    plt.show()

# Function to calculate lake volume and plot values
def calculate_and_plot_volume(elevation_steps, elevation_dem, raster_data):
    volume_array = [calculate_volume(elev, elevation_dem, raster_data) for elev in elevation_steps]
    print(f"Lake bottom elevations: {elevation_steps}")
    volume_array_mcm = [round(vol / 1000000, 2) for vol in volume_array]
    print(f"Lake volume in million cubic meters: {volume_array_mcm}")

    # Plot volume values
    fig, ax = plt.subplots(figsize=(12, 5))
    ax.plot(volume_array_mcm, elevation_steps, label='Lake Xau (LX)')
    ax.grid()
    ax.legend()
    ax.set_xlabel('Volume MCM')
    ax.set_ylabel('Elevation (masl)')
    plt.show()

# Function to plot lake bottom elevation and volume values
def plot_elevation_and_volume(data_array, elevation_steps, volume_array_mcm):
    fig, [ax1, ax2] = plt.subplots(1, 2, figsize=(20, 8), gridspec_kw={'width_ratios': [2, 1]})
    
    # Plot lake bottom elevation
    ax1.set_title('Lake Bottom Elevation')
    bot_elev = ax1.imshow(data_array)
    divider = make_axes_locatable(ax1)
    cax = divider.append_axes('bottom', size='5%', pad=0.5)
    fig.colorbar(bot_elev, cax=cax, orientation='horizontal', label='Elevation (masl)')

    # Plot volume values
    ax2.plot(volume_array_mcm, elevation_steps, label='Lake Xau (LX)')
    ax2.grid()
    ax2.legend()
    ax2.set_xlabel('Volume MCM')
    ax2.set_ylabel('Elevation (masl)')

    plt.show()

# Main code
if __name__ == "__main__":
    # Open Raster
    lake_raster = rasterio.open('D:\Lake_Xau\WAM\WAM26.tif')

    # Get Raster values as Numpy
    lake_bottom = replace_nan_values(lake_raster.read(1))

    # Plot lake bottom elevation
    plot_elevation(lake_bottom)

    # Lake Volume Calculation
    min_elev = np.nanmin(lake_bottom)
    max_elev = np.nanmax(lake_bottom)
    print(f'Min bottom elevation: {min_elev} m, max bottom elevation: {max_elev} m.')

    # Define steps for calculation
    num_steps = 16
    elev_steps = np.round(np.linspace(min_elev, max_elev, num_steps), 0)

    # Calculate volumes for each elevation and plot values
    calculate_and_plot_volume(elev_steps, lake_bottom, lake_raster)

    # Plot lake bottom elevation and volume values
    plot_elevation_and_volume(lake_bottom, elev_steps, volume_array_mcm)

    # Read AVE curve data
    df = pd.read_csv("D:\Lake_Xau\WAM\AVE26(Maximum_LX).csv")

    # Plot AVE curve
    fig, ax1 = plt.subplots(figsize=(10, 6))
    ax1.plot(df['Volume (MCM)'], df['Level (m)'], color="orange", label='AVE Curve')
    ax1.set_title('AVE Curve for LX in September 2012')
    ax1.set_xlabel('Volume (MCM)')
    ax1.set_ylabel('Elevation (m)')
    ax1.grid()
    
    ax2 = ax1.twiny()
    ax2.plot(df['Area (ha)'], df['Level (m)'], label='Area (ha)')
    ax2.set_xlabel('Area (ha)')
    ax2.invert_xaxis()

    plt.legend()
    plt.show()
